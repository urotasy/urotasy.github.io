<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on Ur Memos</title>
    <link>http://example.org/categories/tips/</link>
    <description>Recent content in Tips on Ur Memos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 17 Feb 2025 21:27:22 +0900</lastBuildDate><atom:link href="http://example.org/categories/tips/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How_to_delete_article</title>
      <link>http://example.org/article/how_to_delete_article/</link>
      <pubDate>Mon, 17 Feb 2025 21:27:22 +0900</pubDate>
      
      <guid>http://example.org/article/how_to_delete_article/</guid>
      <description> 手動で hugo new で作成した Markdown ファイルを削除する hugo --cleanDestinationDir を実行する </description>
    </item>
    
    <item>
      <title>このサイトのメンテナンス方法</title>
      <link>http://example.org/article/how_to_maintain_site/</link>
      <pubDate>Sun, 16 Feb 2025 19:54:24 +0900</pubDate>
      
      <guid>http://example.org/article/how_to_maintain_site/</guid>
      <description>久しぶりにこのサイトの記事を更新しようとしたところ、やり方を完全に忘れてしまっていた。
まったく記憶に残っていないが、 https://github.com/urotasy/UrHugoSite に Hugo site が置かれており、そこから生成された HTML を https://github.com/urotasy/urotasy.github.io に commit して GitHub Pages でホスティングしている。 GitHub Pages で Hugo による HTML 生成を行う方法もあるようだが、現状では手動で hugo を実行して生成した HTML を commit, push している。以下、その手順を記録しておく。
https://github.com/urotasy/UrHugoSite を clone したレポジトリで hugo new &amp;lt;new_page_path&amp;gt; を実行して新しいページを作成して編集する。 hugo server -D などでテスト後、 hugo コマンドで public 以下のファイルを更新する public 以下は https://github.com/urotasy/urotasy.github.io の submodule になっているので、まずそちらを commit, push する。そうすると https://urotasy.github.io/ が更新されるので、内容を確認する (少し時間がかかる場合がある) UrHugoSite レポジトリを更新する。まず、 public 以下を更新するために git submodule update --remote を実行する。このあと、 public を含めすべての変更を commit, push する。 </description>
    </item>
    
    <item>
      <title>Hugo で新しいページを作成する方法</title>
      <link>http://example.org/article/how_to_add_new_article/</link>
      <pubDate>Sun, 16 Feb 2025 16:00:46 +0900</pubDate>
      
      <guid>http://example.org/article/how_to_add_new_article/</guid>
      <description>hugo new コマンドを使用して新しいファイルを追加する。
hugo new &amp;lt;path to new file&amp;gt; ページの内容を編集し、 hugot server コマンドでテスト用のサーバを起動する。 -D オプションを指定することで、 draft: true のページも表示される。
hugo server -D 編集が完了したら作成された新規ファイルの draft: true を削除しておく。
最後に hugo コマンドを実行すると静的 HTML が生成される。</description>
    </item>
    
    <item>
      <title>supressions file を用いて valgrind の一部のエラー検出を抑制する</title>
      <link>http://example.org/article/valgrind_suppressions/</link>
      <pubDate>Mon, 02 Oct 2023 23:02:24 +0900</pubDate>
      
      <guid>http://example.org/article/valgrind_suppressions/</guid>
      <description>この記事は主に Valgrind User Manual の 2. Using and understanding the Valgrind core を元に作成しました。
概要 valgrind を利用してメモリリークなどエラーの検出をしていると、自分の開発しているもの以外のエラーを検出してしまうことがある。場合によっては関係のないエラーが多すぎて自分の開発しているものに由来するエラーが見つけられなくなってしまうことがある。
その場合、valgrind の --suppressions オプションの引数に特定の形式のテキストファイルを渡すことで対象のエラーを抑制することができる。引数に渡すテキストファイルを最も簡単に生成するには、--gen-suppressions=yes を指定して valgrind を実行すればよい。検出されたエラー毎にそのエラーを抑制するための文字列を出力するか否か選べるので、必要なものを suppressions file にコピーすればよい。検出されたエラーすべてを抑制したい場合には --gen-suppressions=all を実行するとすべてのエラー毎に抑制するための文字列を出力する。
また、複数の --suppressions オプションを指定することで、複数の suppressions file を使ってエラーを抑制することができる。
suppressions file の詳細 具体例としては /usr/lib/valgrind/default.supp を見るとよい。 suppressions file は個別の抑制を { と } で囲んだ中に指定し、{ と } で囲まれたものを列挙するという形式になっている。この { と } は行頭に書かねばならない。以降、{ と } で囲んだ中の記述方法について説明する。
1 行目 suppressions file の名前を書く。valgrind のログの summary に出力されるだけ。
2 行目 カンマ区切りで suppression 対象のツール名と、 その後ろにコロンと suppression そのものの名前を書く。例えば tool_name1,tool_name2:suppression_name のような形式になる。対象のツールに関係のない suppression は無視されるだけなので、とりあえず全てのツール名を書いておいてよい。</description>
    </item>
    
  </channel>
</rss>
