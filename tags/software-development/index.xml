<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software development on Ur Memos</title>
    <link>http://example.org/tags/software-development/</link>
    <description>Recent content in software development on Ur Memos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 19 Feb 2025 22:28:29 +0900</lastBuildDate><atom:link href="http://example.org/tags/software-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust お勉強記録</title>
      <link>http://example.org/article/rust_study/</link>
      <pubDate>Wed, 19 Feb 2025 22:28:29 +0900</pubDate>
      
      <guid>http://example.org/article/rust_study/</guid>
      <description>作ってみたい Windows GUI アプリケーションがあり、ちょっと調べたところ Rust がよさそう。
全く触ってみたことがないので、チュートリアル代わりに https://doc.rust-jp.rs/book-ja/title-page.html を読んでやってみる。
どうも rustc というのがコンパイラで C における gcc みたいな立ち位置らしい。さらに cargo というビルドシステム兼パッケージマネージャや rustfmt というフォーマッタも標準でついているらしい。
cargo new &amp;lt;name&amp;gt; を実行すると、最初のコードである main.rs やパッケージ (クレート？) の設定情報である Cargo.toml などの生成と (デフォルトでは) git repository の初期化が実行される。Git を使うか否か、代わりになんのバージョン管理システムを使うかなどは cargo new --vcs &amp;lt;VCS&amp;gt; &amp;lt;name&amp;gt; で設定できる。
Cargo で作成したディレクトリ内には Cargo.lock というファイルが生成される。このファイルはプロジェクト内の依存関係の正確なバージョンを記録しているらしい。ファイル内にも書かれているが、これは Cargo によって自動生成されるものなので、自分で触る必要はない。
TODO: https://doc.rust-jp.rs/book-ja/ch01-03-hello-cargo.html#cargo%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B から続きを読む。</description>
    </item>
    
    <item>
      <title>Hugo で既存のページを削除する方法</title>
      <link>http://example.org/article/how_to_delete_article/</link>
      <pubDate>Mon, 17 Feb 2025 21:27:22 +0900</pubDate>
      
      <guid>http://example.org/article/how_to_delete_article/</guid>
      <description> 手動で hugo new で作成した Markdown ファイルを削除する hugo --cleanDestinationDir を実行する </description>
    </item>
    
    <item>
      <title>このサイトのメンテナンス方法</title>
      <link>http://example.org/article/how_to_maintain_site/</link>
      <pubDate>Sun, 16 Feb 2025 19:54:24 +0900</pubDate>
      
      <guid>http://example.org/article/how_to_maintain_site/</guid>
      <description>久しぶりにこのサイトの記事を更新しようとしたところ、やり方を完全に忘れてしまっていた。
まったく記憶に残っていないが、 https://github.com/urotasy/UrHugoSite に Hugo site が置かれており、そこから生成された HTML を https://github.com/urotasy/urotasy.github.io に commit して GitHub Pages でホスティングしている。 GitHub Pages で Hugo による HTML 生成を行う方法もあるようだが、現状では手動で hugo を実行して生成した HTML を commit, push している。以下、その手順を記録しておく。
https://github.com/urotasy/UrHugoSite を clone したレポジトリで hugo new &amp;lt;new_page_path&amp;gt; を実行して新しいページを作成して編集する。 hugo server -D などでテスト後、 hugo コマンドで public 以下のファイルを更新する public 以下は https://github.com/urotasy/urotasy.github.io の submodule になっているので、まずそちらを commit, push する。そうすると https://urotasy.github.io/ が更新されるので、内容を確認する (少し時間がかかる場合がある) UrHugoSite レポジトリを更新する。まず、 public 以下を更新するために git submodule update --remote を実行する。このあと、 public を含めすべての変更を commit, push する。 </description>
    </item>
    
    <item>
      <title>Hugo で新しいページを作成する方法</title>
      <link>http://example.org/article/how_to_add_new_article/</link>
      <pubDate>Sun, 16 Feb 2025 16:00:46 +0900</pubDate>
      
      <guid>http://example.org/article/how_to_add_new_article/</guid>
      <description>hugo new コマンドを使用して新しいファイルを追加する。
hugo new &amp;lt;path to new file&amp;gt; ページの内容を編集し、 hugot server コマンドでテスト用のサーバを起動する。 -D オプションを指定することで、 draft: true のページも表示される。
hugo server -D 編集が完了したら作成された新規ファイルの draft: true を削除しておく。
最後に hugo コマンドを実行すると静的 HTML が生成される。</description>
    </item>
    
  </channel>
</rss>
